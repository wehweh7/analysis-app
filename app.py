
import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns
import io

st.set_page_config(page_title="–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", layout="wide")

# --- SIDEBAR NAVIGATION ---
st.sidebar.title("üìå –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
page = st.sidebar.radio("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª—É:", [
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", 
    "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
    "–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (PCA)", 
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", 
    "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
    "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
])

# --- UPLOADER AND DATA STORAGE ---
if "df" not in st.session_state:
    st.session_state.df = None

if page == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV", type=["csv", "xlsx"])
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith(".csv"):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            st.session_state.df = df.dropna()
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            st.dataframe(st.session_state.df.head())
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

elif page == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
    st.title("üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    if st.session_state.df is not None:
        numeric_df = st.session_state.df.select_dtypes(include=["float64", "int64"])
        corr = numeric_df.corr()
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax)
        st.pyplot(fig)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

elif page == "–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (PCA)":
    st.title("üß† –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Principal Component Analysis)")
    if st.session_state.df is not None:
        df = st.session_state.df.select_dtypes(include=["float64", "int64"])
        selected_features = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", df.columns.tolist(), default=df.columns.tolist())
        if selected_features:
            data = df[selected_features]
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(data)
            pca = PCA()
            components = pca.fit_transform(X_scaled)
            explained_var = pca.explained_variance_ratio_

            st.subheader("üî¢ –û–±—ä—è—Å–Ω—ë–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è")
            st.bar_chart(explained_var)

            st.subheader("üìé –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
            loadings = pd.DataFrame(pca.components_.T, index=selected_features, columns=[f"PC{i+1}" for i in range(len(selected_features))])
            st.dataframe(loadings.round(3))
            st.session_state.loadings = loadings
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

elif page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
    st.title("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Scree Plot")
    if st.session_state.df is not None:
        df = st.session_state.df.select_dtypes(include=["float64", "int64"])
        data = df
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(data)
        pca = PCA()
        pca.fit(X_scaled)
        exp_var = pca.explained_variance_ratio_

        fig, ax = plt.subplots()
        ax.plot(range(1, len(exp_var)+1), exp_var, 'o-', color='b')
        ax.set_title("Scree Plot")
        ax.set_xlabel("–ù–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        ax.set_ylabel("–û–±—ä—è—Å–Ω—ë–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è")
        st.pyplot(fig)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

elif page == "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤":
    st.title("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫")
    if "loadings" in st.session_state:
        csv = st.session_state.loadings.to_csv().encode("utf-8")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
            data=csv,
            file_name="factor_loadings.csv",
            mime="text/csv"
        )
    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")

elif page == "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏":
    st.title("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.markdown("""
–≠—Ç–æ —É—á–µ–±–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —É—á–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ —Ç–µ–º–µ:  
**¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö¬ª**  
–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ **–ë–∞–Ω–∫–∞ –°–∏–Ω–∞—Ä–∞**.

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã Excel –∏ CSV;
- –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑;
- –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (PCA);
- –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Scree Plot;
- —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞.

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python, Streamlit, sklearn, seaborn –∏ pandas.


**–ê–≤—Ç–æ—Ä**: —Å—Ç—É–¥–µ–Ω—Ç –†–≠–£ –∏–º. –ì.–í. –ü–ª–µ—Ö–∞–Ω–æ–≤–∞, 2025 –≥.
    """)

